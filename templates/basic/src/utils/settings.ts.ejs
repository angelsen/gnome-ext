/**
 * Settings utility for GNOME Shell extensions
 */
import Gio from 'gi://Gio';
import GLib from 'gi://GLib';
import { Extension } from '../types/extension';

/**
 * A utility class to manage extension settings
 */
export class Settings {
  private _settings: Gio.Settings;
  private _signalConnections: Map<number, string> = new Map();

  /**
   * Create a new Settings instance for the extension
   * @param extension The extension instance
   */
  constructor(extension: Extension) {
    try {
      this._settings = extension.getSettings();
    } catch (e) {
      console.error(`Failed to get settings for ${extension.metadata.uuid}:`, e);
      throw new Error('Failed to initialize settings');
    }
  }

  /**
   * Get a value from settings
   * @param key The settings key
   * @returns The value for the given key
   */
  get<T>(key: string): T {
    return this._settings.get_value(key).deepUnpack() as T;
  }

  /**
   * Get a boolean value from settings
   * @param key The settings key
   * @returns The boolean value for the given key
   */
  getBoolean(key: string): boolean {
    return this._settings.get_boolean(key);
  }

  /**
   * Get a string value from settings
   * @param key The settings key
   * @returns The string value for the given key
   */
  getString(key: string): string {
    return this._settings.get_string(key);
  }

  /**
   * Get an integer value from settings
   * @param key The settings key
   * @returns The integer value for the given key
   */
  getInt(key: string): number {
    return this._settings.get_int(key);
  }

  /**
   * Get a string array value from settings
   * @param key The settings key
   * @returns The string array value for the given key
   */
  getStrv(key: string): string[] {
    return this._settings.get_strv(key);
  }

  /**
   * Set a value in settings
   * @param key The settings key
   * @param value The value to set
   * @returns True if the value was set successfully
   */
  set<T>(key: string, value: T): boolean {
    try {
      let variant: GLib.Variant;
      
      if (typeof value === 'boolean') {
        this._settings.set_boolean(key, value as boolean);
        return true;
      } else if (typeof value === 'string') {
        this._settings.set_string(key, value as string);
        return true;
      } else if (typeof value === 'number' && Number.isInteger(value)) {
        this._settings.set_int(key, value as number);
        return true;
      } else if (Array.isArray(value) && value.every(item => typeof item === 'string')) {
        this._settings.set_strv(key, value as string[]);
        return true;
      } else {
        // Try to create a variant from the value
        variant = new GLib.Variant('v', value as any);
        return this._settings.set_value(key, variant);
      }
    } catch (e) {
      console.error(`Failed to set setting ${key}:`, e);
      return false;
    }
  }

  /**
   * Set a boolean value in settings
   * @param key The settings key
   * @param value The boolean value to set
   */
  setBoolean(key: string, value: boolean): void {
    this._settings.set_boolean(key, value);
  }

  /**
   * Set a string value in settings
   * @param key The settings key
   * @param value The string value to set
   */
  setString(key: string, value: string): void {
    this._settings.set_string(key, value);
  }

  /**
   * Set an integer value in settings
   * @param key The settings key
   * @param value The integer value to set
   */
  setInt(key: string, value: number): void {
    this._settings.set_int(key, value);
  }

  /**
   * Set a string array value in settings
   * @param key The settings key
   * @param value The string array value to set
   */
  setStrv(key: string, value: string[]): void {
    this._settings.set_strv(key, value);
  }

  /**
   * Connect to a settings change
   * @param key The settings key to watch
   * @param callback The function to call when the setting changes
   * @returns The connection ID
   */
  connect(key: string, callback: () => void): number {
    const id = this._settings.connect(`changed::${key}`, callback);
    this._signalConnections.set(id, key);
    return id;
  }

  /**
   * Disconnect from a settings change
   * @param id The connection ID returned from connect()
   */
  disconnect(id: number): void {
    if (this._signalConnections.has(id)) {
      this._settings.disconnect(id);
      this._signalConnections.delete(id);
    }
  }

  /**
   * Bind a settings key to a property of an object
   * @param key The settings key to bind
   * @param object The object to bind to
   * @param property The property of the object to bind
   * @param flags Binding flags
   * @returns The binding connection ID
   */
  bind(
    key: string, 
    object: any, 
    property: string, 
    flags: Gio.SettingsBindFlags = Gio.SettingsBindFlags.DEFAULT
  ): void {
    this._settings.bind(key, object, property, flags);
  }

  /**
   * Clean up any remaining connections
   */
  destroy(): void {
    for (const id of this._signalConnections.keys()) {
      this._settings.disconnect(id);
    }
    this._signalConnections.clear();
  }
}